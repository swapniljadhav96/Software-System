//Write a program using YACC specifications to implement calulator to perform various arithmetic 
//operations 

%{
#include "y.tab.h"
#include<stdio.h>
#include<math.h>
//extern int yylval;
%}
%%
[0-9]+(\.[0-9]*)? 	{yylval.dval=atof(yytext); return NUMBER;}
[ \t]	;
\n	return 0;
.	return yytext[0];
sin	return SINE;
log     return nLOG;
sqrt    return SQRT;
%%
int yywrap()
{
return 1;
}

/*
%{
#include "y.tab.h"  // Include the header generated by Bison, which contains token definitions
#include <stdio.h>  // Include the standard I/O library
#include <math.h>   // Include the math library for mathematical functions
// extern int yylval; // External declaration for yylval, used for storing token values (commented out since it might not be used here)
%}

%%
[0-9]+(\.[0-9]*)? { yylval.dval = atof(yytext); return NUMBER; }  // Match integers or floating-point numbers and return NUMBER token
[ \t] ;  // Ignore whitespace (spaces and tabs)
\n return 0;  // Ignore newline characters (do not return a token)
. return yytext[0];  // Return any other character as its ASCII value
sin return SINE;  // Match "sin" and return the SINE token
log return nLOG;  // Match "log" and return the nLOG token
sqrt return SQRT;  // Match "sqrt" and return the SQRT token
%%

int yywrap()
{
    return 1;  // Indicates the end of input for the lexer
}

This code defines a Flex lexer for parsing mathematical expressions that include numbers and some mathematical functions like sine, logarithm, and square root. 
Let's go through it line by line and add detailed comments to explain each part:

Explanation of Key Components:
Header Section (%{ ... %}):

#include "y.tab.h": Includes the header file generated by Bison, which contains token definitions and any other necessary declarations.
#include <stdio.h>: Includes the standard I/O library for input and output operations.
#include <math.h>: Includes the math library for mathematical functions.
// extern int yylval;: This line, commented out, declares an external variable yylval used for storing token values. In Flex and Bison, yylval is often used to pass values between the lexer and parser.
Rules Section (%% ... %%):

[0-9]+(\.[0-9]*)? { yylval.dval = atof(yytext); return NUMBER; }:
Matches integers and floating-point numbers.
yylval.dval = atof(yytext);: Converts the matched text to a double and stores it in yylval.dval.
return NUMBER;: Returns the NUMBER token.
[ \t] ;: Ignores whitespace characters (spaces and tabs).
\n return 0;: Ignores newline characters (does not return a token).
. return yytext[0];: Returns any other character as its ASCII value.
sin return SINE;: Matches the string "sin" and returns the SINE token.
log return nLOG;: Matches the string "log" and returns the nLOG token.
sqrt return SQRT;: Matches the string "sqrt" and returns the SQRT token.
yywrap Function:

int yywrap() { return 1; }: Indicates the end of input for the lexer by returning 1.

*/
