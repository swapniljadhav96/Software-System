%{
/*
 * We now build a lexical analyzer to be used by a higher-level parser.
 */
#include "y.tab.h"    /* token codes from the parser */
%}
verb 		is|am|are|was|were|be|being|been|do|does|did|will|would|should|can|could|have|has|had|go|play
adverb 		very|simply|gently|calmly|quietly
preposition 	to|from|above|behind|below|between
conjunction 	if|then|and|but|or
adjective 	their|my|your|his|her|its
pronoun 	I|you|he|she|they
noun 		[a-zA-Z]+
%%
[\t ]+  ;
{verb}    	 return VERB;  
{adverb}         return ADVERB;   
{preposition}    return PREPOSITION; 
{conjunction}    return CONJUNCTION;   
{adjective}      return ADJECTIVE;          
{pronoun}        return PRONOUN;
{noun}           return NOUN;  
"\n"		 return NL;  
%%

/*

%{
/*
 * We now build a lexical analyzer to be used by a higher-level parser.
 */
#include "y.tab.h"    /* Include the header file generated by Bison containing token codes */
%}

verb         is|am|are|was|were|be|being|been|do|does|did|will|would|should|can|could|have|has|had|go|play // Define verbs
adverb       very|simply|gently|calmly|quietly // Define adverbs
preposition  to|from|above|behind|below|between // Define prepositions
conjunction  if|then|and|but|or // Define conjunctions
adjective    their|my|your|his|her|its // Define adjectives
pronoun      I|you|he|she|they // Define pronouns
noun         [a-zA-Z]+ // Define a noun as one or more letters (case insensitive)

%%

[\t ]+               ; // Ignore whitespace (spaces and tabs)
{verb}               return VERB;        // Return the token VERB for verbs
{adverb}             return ADVERB;      // Return the token ADVERB for adverbs
{preposition}        return PREPOSITION; // Return the token PREPOSITION for prepositions
{conjunction}        return CONJUNCTION; // Return the token CONJUNCTION for conjunctions
{adjective}          return ADJECTIVE;   // Return the token ADJECTIVE for adjectives
{pronoun}            return PRONOUN;     // Return the token PRONOUN for pronouns
{noun}               return NOUN;        // Return the token NOUN for nouns
"\n"                 return NL;          // Return the token NL for newline characters

%%

int yywrap() {
    return 1; // Indicates the end of input for the lexer
}

Explanation of Key Components:
Header Section (%{ ... %}):

This section contains C code that is copied verbatim into the generated C file.
Includes the header file y.tab.h generated by Bison (or yacc), which contains token definitions needed by the lexer.
Definitions Section:

verb: Defines a pattern to match common verbs.
adverb: Defines a pattern to match common adverbs.
preposition: Defines a pattern to match common prepositions.
conjunction: Defines a pattern to match common conjunctions.
adjective: Defines a pattern to match common adjectives.
pronoun: Defines a pattern to match common pronouns.
noun: Defines a pattern to match any sequence of one or more letters, which serves as a catch-all for nouns.
Rules Section (%% ... %%):

[\t ]+ ;: Ignores whitespace characters (spaces and tabs).
{verb} return VERB;: Matches verbs and returns the VERB token.
{adverb} return ADVERB;: Matches adverbs and returns the ADVERB token.
{preposition} return PREPOSITION;: Matches prepositions and returns the PREPOSITION token.
{conjunction} return CONJUNCTION;: Matches conjunctions and returns the CONJUNCTION token.
{adjective} return ADJECTIVE;: Matches adjectives and returns the ADJECTIVE token.
{pronoun} return PRONOUN;: Matches pronouns and returns the PRONOUN token.
{noun} return NOUN;: Matches any sequence of letters (nouns) and returns the NOUN token.
"\n" return NL;: Matches newline characters and returns the NL token.
yywrap Function:

int yywrap() { return 1; }: This function is called by Flex when it reaches the end of the input. Returning 1 indicates that the end of input has been reached.

*/
