%{
%}
letter [A-Za-z]
digit [0-9]
identifier {letter}({letter}|{digit})*
number {digit}+(\.{digit}+)?
punctuation [;,."#(){}]
operators [+-=*<>]
keywords if|else|for|int|while|do|void
literal ["].*["]
comment "//".*
headerfile "#".*
multicomment "/*"(.|\n)*"*/"

%%

{headerfile} {printf("\n Headerfile %s is found ",yytext);}
{keywords} {printf("\n Keyword %s is found",yytext);}
{identifier} {printf("\n Identifier %s is found ",yytext);}
{number} {printf("\n  Number %s is found ",yytext);}
{punctuation} {printf("\n Punctuation  %s is found ",yytext);}
{literal} {printf("\n Literal %s is found ",yytext);}
{operators} {printf("\n Operators  %s is found ",yytext);}
{comment} {printf("\n  Single-line Comment %s is found ",yytext);}
{multicomment} {printf("\n Multi-line comment %s is found",yytext);}

%%

int main(void)
{
 yylex();
 return 0;
}

int yywrap()
{
  return 1;
}

//lex File1.l
//cc lex.yy.c
//./a.out < Input2.c
//output is generated by the code

/*
%{
#include <stdio.h> // Include the standard I/O library to use printf function
%}

letter [A-Za-z] // Define a letter as any uppercase or lowercase English alphabet
digit [0-9] // Define a digit as any single numeral from 0 to 9
identifier {letter}({letter}|{digit})* // Define an identifier starting with a letter followed by any combination of letters or digits
number {digit}+(\.{digit}+)? // Define a number as one or more digits, optionally followed by a decimal point and one or more digits
punctuation [;,."#(){}] // Define punctuation characters commonly used in code
operators [+-=*<>] // Define basic operators
keywords \b(if|else|for|int|while|do|void)\b // Define keywords, using word boundaries to ensure exact matches
literal \"([^"\\]|\\.)*\" // Define a literal string, handling escaped characters within quotes
comment "//".* // Define single-line comments starting with // and continuing to the end of the line
headerfile "#".* // Define header file inclusion lines starting with #
multicomment "/*"(.|\n)*?"*/" // Define multi-line comments starting with /* and ending with */, non-greedy to handle large blocks

%%

{headerfile} {printf("\nHeaderfile %s is found", yytext);} // Print when a header file inclusion is found
{keywords} {printf("\nKeyword %s is found", yytext);} // Print when a keyword is found
{identifier} {printf("\nIdentifier %s is found", yytext);} // Print when an identifier is found
{number} {printf("\nNumber %s is found", yytext);} // Print when a number is found
{punctuation} {printf("\nPunctuation %s is found", yytext);} // Print when a punctuation mark is found
{literal} {printf("\nLiteral %s is found", yytext);} // Print when a string literal is found
{operators} {printf("\nOperators %s is found", yytext);} // Print when an operator is found
{comment} {printf("\nSingle-line Comment %s is found", yytext);} // Print when a single-line comment is found
{multicomment} {printf("\nMulti-line comment %s is found", yytext);} // Print when a multi-line comment is found

. { printf("\nUnknown token %s is found", yytext); } // Catch-all rule for any unrecognized token and print it

%%

int main(void)
{
    yylex(); // Call the lexical analyzer to start processing input
    return 0; // Return 0 to indicate successful execution
}

int yywrap()
{
    return 1; // Return 1 to indicate the end of input for the lexer
}
*/

